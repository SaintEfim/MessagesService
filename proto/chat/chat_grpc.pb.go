// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GreeterChats_CreateMessage_FullMethodName = "/chats.GreeterChats/CreateMessage"
)

// GreeterChatsClient is the client API for GreeterChats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterChatsClient interface {
	CreateMessage(ctx context.Context, in *MessageCreateRequest, opts ...grpc.CallOption) (*MessageCreateResponse, error)
}

type greeterChatsClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterChatsClient(cc grpc.ClientConnInterface) GreeterChatsClient {
	return &greeterChatsClient{cc}
}

func (c *greeterChatsClient) CreateMessage(ctx context.Context, in *MessageCreateRequest, opts ...grpc.CallOption) (*MessageCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageCreateResponse)
	err := c.cc.Invoke(ctx, GreeterChats_CreateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterChatsServer is the server API for GreeterChats service.
// All implementations must embed UnimplementedGreeterChatsServer
// for forward compatibility.
type GreeterChatsServer interface {
	CreateMessage(context.Context, *MessageCreateRequest) (*MessageCreateResponse, error)
	mustEmbedUnimplementedGreeterChatsServer()
}

// UnimplementedGreeterChatsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterChatsServer struct{}

func (UnimplementedGreeterChatsServer) CreateMessage(context.Context, *MessageCreateRequest) (*MessageCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedGreeterChatsServer) mustEmbedUnimplementedGreeterChatsServer() {}
func (UnimplementedGreeterChatsServer) testEmbeddedByValue()                      {}

// UnsafeGreeterChatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterChatsServer will
// result in compilation errors.
type UnsafeGreeterChatsServer interface {
	mustEmbedUnimplementedGreeterChatsServer()
}

func RegisterGreeterChatsServer(s grpc.ServiceRegistrar, srv GreeterChatsServer) {
	// If the following call pancis, it indicates UnimplementedGreeterChatsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GreeterChats_ServiceDesc, srv)
}

func _GreeterChats_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterChatsServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreeterChats_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterChatsServer).CreateMessage(ctx, req.(*MessageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GreeterChats_ServiceDesc is the grpc.ServiceDesc for GreeterChats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreeterChats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chats.GreeterChats",
	HandlerType: (*GreeterChatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _GreeterChats_CreateMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
